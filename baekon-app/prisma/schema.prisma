// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Section {
  WORK
  LIFE
}

enum MessageType {
  USER
  ASSISTANT
  SYSTEM
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  password    String?  // For email/password auth
  emailVerified DateTime?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  events        Event[]
  notes         Note[]
  chatLogs      ChatLog[]
  files         File[]
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
  conversations Conversation[]
  preferences   UserPreference?
  memories      Memory[]
  contexts      ConversationContext[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  location    String?
  priority    Priority  @default(MEDIUM)
  section     Section   @default(WORK)
  completed   Boolean   @default(false)

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("events")
}

model Note {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  summary     String?
  tags        String[] @default([])
  priority    Priority @default(MEDIUM)
  section     Section  @default(WORK)
  isArchived  Boolean  @default(false)

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notes")
}

model ChatLog {
  id          String      @id @default(cuid())
  sessionId   String
  messages    ChatMessage[]

  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("chat_logs")
}

model ChatMessage {
  id          String      @id @default(cuid())
  content     String      @db.Text
  type        MessageType @default(USER)

  // Relations
  chatLogId   String
  chatLog     ChatLog     @relation(fields: [chatLogId], references: [id], onDelete: Cascade)

  createdAt   DateTime    @default(now())

  @@map("chat_messages")
}

model File {
  id                  String   @id @default(cuid())
  name                String
  url                 String
  size                Int
  type                String
  description         String?
  cloudinaryPublicId  String?

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("files")
}

// Settings for user preferences
model UserSettings {
  id          String   @id @default(cuid())
  theme       String   @default("dark")
  timezone    String   @default("UTC")
  preferences String?  // JSON string for additional preferences

  // Relations
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_settings")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String       // 'user', 'assistant', 'system', 'function'
  content        String       @db.Text
  functionName   String?      // For function calls
  functionArgs   Json?        // Function arguments
  timestamp      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UserPreference {
  id              String   @id @default(cuid())
  userId          String   @unique
  aiPersonality   String   @default("helpful")
  timezone        String   @default("UTC")
  workingHours    Json?    // {start: "9:00", end: "17:00"}
  preferences     Json?    // Flexible JSON for any preferences
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Memory {
  id              String   @id @default(cuid())
  userId          String
  type            String   // 'fact', 'preference', 'pattern', 'context'
  content         String   @db.Text
  summary         String?
  importance      Int      @default(5) // 1-10 scale
  context         Json?    // Related context data
  tags            String[] @default([])
  embedding       String?  // For semantic search (vector as string)
  relatedMemories String[] @default([]) // IDs of related memories
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastAccessed    DateTime @default(now())
  accessCount     Int      @default(1)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([userId, importance])
  @@index([userId, lastAccessed])
  @@map("memories")
}

model ConversationContext {
  id              String   @id @default(cuid())
  userId          String
  sessionId       String   // Groups related conversations
  topic           String?  // Main topic of conversation
  summary         String?  @db.Text
  keyPoints       String[] @default([])
  relevantMemories String[] @default([]) // Memory IDs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, sessionId])
  @@map("conversation_contexts")
}
